Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PRINTF LEFT_PARENTESIS first_arg additional_args RIGHT_PARENTESIS SEMICOLON
Rule 2     first_arg -> STRING
Rule 3     additional_args -> COMMA arg additional_args
Rule 4     additional_args -> COMMA arg
Rule 5     additional_args -> empty
Rule 6     empty -> <empty>
Rule 7     arg -> INT
Rule 8     arg -> FLOAT
Rule 9     arg -> STRING
Rule 10    arg -> IDENTIFIER

Terminals, with rules where they appear

COMMA                : 3 4
FLOAT                : 8
IDENTIFIER           : 10
INT                  : 7
LEFT_PARENTESIS      : 1
PRINTF               : 1
RIGHT_PARENTESIS     : 1
SEMICOLON            : 1
STRING               : 2 9
error                : 

Nonterminals, with rules where they appear

additional_args      : 1 3
arg                  : 3 4
empty                : 5
first_arg            : 1
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PRINTF LEFT_PARENTESIS first_arg additional_args RIGHT_PARENTESIS SEMICOLON

    PRINTF          shift and go to state 2

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PRINTF . LEFT_PARENTESIS first_arg additional_args RIGHT_PARENTESIS SEMICOLON

    LEFT_PARENTESIS shift and go to state 3


state 3

    (1) statement -> PRINTF LEFT_PARENTESIS . first_arg additional_args RIGHT_PARENTESIS SEMICOLON
    (2) first_arg -> . STRING

    STRING          shift and go to state 5

    first_arg                      shift and go to state 4

state 4

    (1) statement -> PRINTF LEFT_PARENTESIS first_arg . additional_args RIGHT_PARENTESIS SEMICOLON
    (3) additional_args -> . COMMA arg additional_args
    (4) additional_args -> . COMMA arg
    (5) additional_args -> . empty
    (6) empty -> .

    COMMA           shift and go to state 7
    RIGHT_PARENTESIS reduce using rule 6 (empty -> .)

    additional_args                shift and go to state 6
    empty                          shift and go to state 8

state 5

    (2) first_arg -> STRING .

    COMMA           reduce using rule 2 (first_arg -> STRING .)
    RIGHT_PARENTESIS reduce using rule 2 (first_arg -> STRING .)


state 6

    (1) statement -> PRINTF LEFT_PARENTESIS first_arg additional_args . RIGHT_PARENTESIS SEMICOLON

    RIGHT_PARENTESIS shift and go to state 9


state 7

    (3) additional_args -> COMMA . arg additional_args
    (4) additional_args -> COMMA . arg
    (7) arg -> . INT
    (8) arg -> . FLOAT
    (9) arg -> . STRING
    (10) arg -> . IDENTIFIER

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    IDENTIFIER      shift and go to state 14

    arg                            shift and go to state 10

state 8

    (5) additional_args -> empty .

    RIGHT_PARENTESIS reduce using rule 5 (additional_args -> empty .)


state 9

    (1) statement -> PRINTF LEFT_PARENTESIS first_arg additional_args RIGHT_PARENTESIS . SEMICOLON

    SEMICOLON       shift and go to state 15


state 10

    (3) additional_args -> COMMA arg . additional_args
    (4) additional_args -> COMMA arg .
    (3) additional_args -> . COMMA arg additional_args
    (4) additional_args -> . COMMA arg
    (5) additional_args -> . empty
    (6) empty -> .

  ! reduce/reduce conflict for RIGHT_PARENTESIS resolved using rule 4 (additional_args -> COMMA arg .)
    RIGHT_PARENTESIS reduce using rule 4 (additional_args -> COMMA arg .)
    COMMA           shift and go to state 7

  ! RIGHT_PARENTESIS [ reduce using rule 6 (empty -> .) ]

    additional_args                shift and go to state 16
    empty                          shift and go to state 8

state 11

    (7) arg -> INT .

    COMMA           reduce using rule 7 (arg -> INT .)
    RIGHT_PARENTESIS reduce using rule 7 (arg -> INT .)


state 12

    (8) arg -> FLOAT .

    COMMA           reduce using rule 8 (arg -> FLOAT .)
    RIGHT_PARENTESIS reduce using rule 8 (arg -> FLOAT .)


state 13

    (9) arg -> STRING .

    COMMA           reduce using rule 9 (arg -> STRING .)
    RIGHT_PARENTESIS reduce using rule 9 (arg -> STRING .)


state 14

    (10) arg -> IDENTIFIER .

    COMMA           reduce using rule 10 (arg -> IDENTIFIER .)
    RIGHT_PARENTESIS reduce using rule 10 (arg -> IDENTIFIER .)


state 15

    (1) statement -> PRINTF LEFT_PARENTESIS first_arg additional_args RIGHT_PARENTESIS SEMICOLON .

    $end            reduce using rule 1 (statement -> PRINTF LEFT_PARENTESIS first_arg additional_args RIGHT_PARENTESIS SEMICOLON .)


state 16

    (3) additional_args -> COMMA arg additional_args .

    RIGHT_PARENTESIS reduce using rule 3 (additional_args -> COMMA arg additional_args .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 10 resolved using rule (additional_args -> COMMA arg)
WARNING: rejected rule (empty -> <empty>) in state 10
